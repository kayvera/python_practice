General info on big o

Describes efficiency of an algorithm
Sometimes, things may be physically faster to deliver data by plane/car as opposed to online depending on file size

Best, average, and worst case 

O(n) only going over an element once 

big o - less than or equal to the worst case
big omega - at least more than the Best
big theta - within bounds of best and worse case 

O(1)      constant - accessing element in an array
O(N)      linear - loop through array of elements
O(LogN)   logarithmic - find an element in sorted array - when list is divided by 2 - binary search
O(N^2)    quadratic - looking at every index in the array twice
O(2^N)    exponential - double recursion in fibonacci

Drop constants and non-dominant terms

O(N) can be faster than O(1) for specific inputs 

Fast computer, fast memory access, lower constant
slow computer, slow memory access, higher constant

do this then when done do that is O(A+B)]
do this for each time you do that O(A*B)

Rule 1: any assignment statements and if statements that are executed once regardless of the size of the problem O(1)
Rule 2: a simple for loop from 0 to n O(n)
Rule 3: a nested loop of the same type takes quadratic time O(n^2)
Rule 4: a loop in which controlling parameter is divided by two at each step O(log n)
Rule 5: when dealing with multiple statements, just add them up 